// Code generated by go-swagger; DO NOT EDIT.

package entries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SearchLogQueryHandlerFunc turns a function with the right signature into a search log query handler
type SearchLogQueryHandlerFunc func(SearchLogQueryParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SearchLogQueryHandlerFunc) Handle(params SearchLogQueryParams) middleware.Responder {
	return fn(params)
}

// SearchLogQueryHandler interface for that can handle valid search log query params
type SearchLogQueryHandler interface {
	Handle(SearchLogQueryParams) middleware.Responder
}

// NewSearchLogQuery creates a new http.Handler for the search log query operation
func NewSearchLogQuery(ctx *middleware.Context, handler SearchLogQueryHandler) *SearchLogQuery {
	return &SearchLogQuery{Context: ctx, Handler: handler}
}

/*SearchLogQuery swagger:route POST /api/v1/log/entries/retrieve entries searchLogQuery

Searches transparency log for one or more log entries

*/
type SearchLogQuery struct {
	Context *middleware.Context
	Handler SearchLogQueryHandler
}

func (o *SearchLogQuery) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSearchLogQueryParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
