// Code generated by go-swagger; DO NOT EDIT.

// /*
// Copyright The Rekor Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SignedTreeHead The current signed tree head
//
// swagger:model SignedTreeHead
type SignedTreeHead struct {

	// Key hint
	// Required: true
	// Format: byte
	KeyHint *strfmt.Base64 `json:"keyHint"`

	// Log root
	// Required: true
	// Format: byte
	LogRoot *strfmt.Base64 `json:"logRoot"`

	// Signature for log root
	// Required: true
	// Format: byte
	Signature *strfmt.Base64 `json:"signature"`
}

// Validate validates this signed tree head
func (m *SignedTreeHead) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKeyHint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogRoot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignature(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SignedTreeHead) validateKeyHint(formats strfmt.Registry) error {

	if err := validate.Required("keyHint", "body", m.KeyHint); err != nil {
		return err
	}

	return nil
}

func (m *SignedTreeHead) validateLogRoot(formats strfmt.Registry) error {

	if err := validate.Required("logRoot", "body", m.LogRoot); err != nil {
		return err
	}

	return nil
}

func (m *SignedTreeHead) validateSignature(formats strfmt.Registry) error {

	if err := validate.Required("signature", "body", m.Signature); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this signed tree head based on context it is used
func (m *SignedTreeHead) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SignedTreeHead) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SignedTreeHead) UnmarshalBinary(b []byte) error {
	var res SignedTreeHead
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
