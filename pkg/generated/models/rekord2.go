// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Rekord2 Rekord2 object
//
// swagger:model rekord2
type Rekord2 struct {

	// api version
	// Required: true
	// Enum: [0.0.1]
	APIVersion *string `json:"apiVersion"`

	// spec
	// Required: true
	Spec *Rekord2Schema `json:"spec"`
}

// Kind gets the kind of this subtype
func (m *Rekord2) Kind() string {
	return "rekord2"
}

// SetKind sets the kind of this subtype
func (m *Rekord2) SetKind(val string) {
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *Rekord2) UnmarshalJSON(raw []byte) error {
	var data struct {

		// api version
		// Required: true
		// Enum: [0.0.1]
		APIVersion *string `json:"apiVersion"`

		// spec
		// Required: true
		Spec *Rekord2Schema `json:"spec"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		Kind string `json:"kind"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result Rekord2

	if base.Kind != result.Kind() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid kind value: %q", base.Kind)
	}

	result.APIVersion = data.APIVersion
	result.Spec = data.Spec

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m Rekord2) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// api version
		// Required: true
		// Enum: [0.0.1]
		APIVersion *string `json:"apiVersion"`

		// spec
		// Required: true
		Spec *Rekord2Schema `json:"spec"`
	}{

		APIVersion: m.APIVersion,

		Spec: m.Spec,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Kind string `json:"kind"`
	}{

		Kind: m.Kind(),
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this rekord2
func (m *Rekord2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAPIVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var rekord2TypeAPIVersionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["0.0.1"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rekord2TypeAPIVersionPropEnum = append(rekord2TypeAPIVersionPropEnum, v)
	}
}

// property enum
func (m *Rekord2) validateAPIVersionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, rekord2TypeAPIVersionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Rekord2) validateAPIVersion(formats strfmt.Registry) error {

	if err := validate.Required("apiVersion", "body", m.APIVersion); err != nil {
		return err
	}

	// value enum
	if err := m.validateAPIVersionEnum("apiVersion", "body", *m.APIVersion); err != nil {
		return err
	}

	return nil
}

func (m *Rekord2) validateSpec(formats strfmt.Registry) error {

	if err := validate.Required("spec", "body", m.Spec); err != nil {
		return err
	}

	if m.Spec != nil {
		if err := m.Spec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("spec")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this rekord2 based on the context it is used
func (m *Rekord2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Rekord2) contextValidateSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.Spec != nil {
		if err := m.Spec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("spec")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Rekord2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Rekord2) UnmarshalBinary(b []byte) error {
	var res Rekord2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
