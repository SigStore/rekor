// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Rekord2Schema Rekor2 Schema
//
// Schema for Rekord object
//
// swagger:model rekord2Schema
type Rekord2Schema struct {

	// data2
	// Required: true
	Data2 *Rekord2SchemaData2 `json:"data2"`

	// Arbitrary content to be included in the verifiable entry in the transparency log
	ExtraData2 interface{} `json:"extraData2,omitempty"`

	// signature2
	// Required: true
	Signature2 *Rekord2SchemaSignature2 `json:"signature2"`
}

// Validate validates this rekord2 schema
func (m *Rekord2Schema) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignature2(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Rekord2Schema) validateData2(formats strfmt.Registry) error {

	if err := validate.Required("data2", "body", m.Data2); err != nil {
		return err
	}

	if m.Data2 != nil {
		if err := m.Data2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data2")
			}
			return err
		}
	}

	return nil
}

func (m *Rekord2Schema) validateSignature2(formats strfmt.Registry) error {

	if err := validate.Required("signature2", "body", m.Signature2); err != nil {
		return err
	}

	if m.Signature2 != nil {
		if err := m.Signature2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("signature2")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this rekord2 schema based on the context it is used
func (m *Rekord2Schema) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateData2(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSignature2(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Rekord2Schema) contextValidateData2(ctx context.Context, formats strfmt.Registry) error {

	if m.Data2 != nil {
		if err := m.Data2.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data2")
			}
			return err
		}
	}

	return nil
}

func (m *Rekord2Schema) contextValidateSignature2(ctx context.Context, formats strfmt.Registry) error {

	if m.Signature2 != nil {
		if err := m.Signature2.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("signature2")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Rekord2Schema) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Rekord2Schema) UnmarshalBinary(b []byte) error {
	var res Rekord2Schema
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Rekord2SchemaData2 Information about the content associated with the entry
//
// swagger:model Rekord2SchemaData2
type Rekord2SchemaData2 struct {

	// Specifies the content inline within the document
	Content2 string `json:"content2,omitempty"`

	// hash2
	Hash2 *Rekord2SchemaData2Hash2 `json:"hash2,omitempty"`

	// Specifies the location of the content; if this is specified, a hash value must also be provided
	// Format: uri
	Url2 strfmt.URI `json:"url2,omitempty"`
}

// Validate validates this rekord2 schema data2
func (m *Rekord2SchemaData2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHash2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUrl2(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Rekord2SchemaData2) validateHash2(formats strfmt.Registry) error {
	if swag.IsZero(m.Hash2) { // not required
		return nil
	}

	if m.Hash2 != nil {
		if err := m.Hash2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data2" + "." + "hash2")
			}
			return err
		}
	}

	return nil
}

func (m *Rekord2SchemaData2) validateUrl2(formats strfmt.Registry) error {
	if swag.IsZero(m.Url2) { // not required
		return nil
	}

	if err := validate.FormatOf("data2"+"."+"url2", "body", "uri", m.Url2.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this rekord2 schema data2 based on the context it is used
func (m *Rekord2SchemaData2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHash2(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Rekord2SchemaData2) contextValidateHash2(ctx context.Context, formats strfmt.Registry) error {

	if m.Hash2 != nil {
		if err := m.Hash2.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data2" + "." + "hash2")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Rekord2SchemaData2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Rekord2SchemaData2) UnmarshalBinary(b []byte) error {
	var res Rekord2SchemaData2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Rekord2SchemaData2Hash2 Specifies the hash algorithm and value for the content
//
// swagger:model Rekord2SchemaData2Hash2
type Rekord2SchemaData2Hash2 struct {

	// The hashing function used to compute the hash value
	// Required: true
	// Enum: [sha256]
	Algorithm2 *string `json:"algorithm2"`

	// The hash value for the content
	// Required: true
	Value2 *string `json:"value2"`
}

// Validate validates this rekord2 schema data2 hash2
func (m *Rekord2SchemaData2Hash2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlgorithm2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue2(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var rekord2SchemaData2Hash2TypeAlgorithm2PropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["sha256"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rekord2SchemaData2Hash2TypeAlgorithm2PropEnum = append(rekord2SchemaData2Hash2TypeAlgorithm2PropEnum, v)
	}
}

const (

	// Rekord2SchemaData2Hash2Algorithm2Sha256 captures enum value "sha256"
	Rekord2SchemaData2Hash2Algorithm2Sha256 string = "sha256"
)

// prop value enum
func (m *Rekord2SchemaData2Hash2) validateAlgorithm2Enum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, rekord2SchemaData2Hash2TypeAlgorithm2PropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Rekord2SchemaData2Hash2) validateAlgorithm2(formats strfmt.Registry) error {

	if err := validate.Required("data2"+"."+"hash2"+"."+"algorithm2", "body", m.Algorithm2); err != nil {
		return err
	}

	// value enum
	if err := m.validateAlgorithm2Enum("data2"+"."+"hash2"+"."+"algorithm2", "body", *m.Algorithm2); err != nil {
		return err
	}

	return nil
}

func (m *Rekord2SchemaData2Hash2) validateValue2(formats strfmt.Registry) error {

	if err := validate.Required("data2"+"."+"hash2"+"."+"value2", "body", m.Value2); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this rekord2 schema data2 hash2 based on context it is used
func (m *Rekord2SchemaData2Hash2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Rekord2SchemaData2Hash2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Rekord2SchemaData2Hash2) UnmarshalBinary(b []byte) error {
	var res Rekord2SchemaData2Hash2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Rekord2SchemaSignature2 Information about the detached signature associated with the entry
//
// swagger:model Rekord2SchemaSignature2
type Rekord2SchemaSignature2 struct {

	// Specifies the content of the signature inline within the document
	// Format: byte
	Content2 strfmt.Base64 `json:"content2,omitempty"`

	// Specifies the format of the signature
	// Enum: [pgp]
	Format2 string `json:"format2,omitempty"`

	// public key2
	PublicKey2 *Rekord2SchemaSignature2PublicKey2 `json:"publicKey2,omitempty"`

	// Specifies the location of the signature
	// Format: uri
	Url2 strfmt.URI `json:"url2,omitempty"`
}

// Validate validates this rekord2 schema signature2
func (m *Rekord2SchemaSignature2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFormat2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublicKey2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUrl2(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var rekord2SchemaSignature2TypeFormat2PropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["pgp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rekord2SchemaSignature2TypeFormat2PropEnum = append(rekord2SchemaSignature2TypeFormat2PropEnum, v)
	}
}

const (

	// Rekord2SchemaSignature2Format2Pgp captures enum value "pgp"
	Rekord2SchemaSignature2Format2Pgp string = "pgp"
)

// prop value enum
func (m *Rekord2SchemaSignature2) validateFormat2Enum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, rekord2SchemaSignature2TypeFormat2PropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Rekord2SchemaSignature2) validateFormat2(formats strfmt.Registry) error {
	if swag.IsZero(m.Format2) { // not required
		return nil
	}

	// value enum
	if err := m.validateFormat2Enum("signature2"+"."+"format2", "body", m.Format2); err != nil {
		return err
	}

	return nil
}

func (m *Rekord2SchemaSignature2) validatePublicKey2(formats strfmt.Registry) error {
	if swag.IsZero(m.PublicKey2) { // not required
		return nil
	}

	if m.PublicKey2 != nil {
		if err := m.PublicKey2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("signature2" + "." + "publicKey2")
			}
			return err
		}
	}

	return nil
}

func (m *Rekord2SchemaSignature2) validateUrl2(formats strfmt.Registry) error {
	if swag.IsZero(m.Url2) { // not required
		return nil
	}

	if err := validate.FormatOf("signature2"+"."+"url2", "body", "uri", m.Url2.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this rekord2 schema signature2 based on the context it is used
func (m *Rekord2SchemaSignature2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePublicKey2(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Rekord2SchemaSignature2) contextValidatePublicKey2(ctx context.Context, formats strfmt.Registry) error {

	if m.PublicKey2 != nil {
		if err := m.PublicKey2.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("signature2" + "." + "publicKey2")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Rekord2SchemaSignature2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Rekord2SchemaSignature2) UnmarshalBinary(b []byte) error {
	var res Rekord2SchemaSignature2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Rekord2SchemaSignature2PublicKey2 The public key that can verify the signature
//
// swagger:model Rekord2SchemaSignature2PublicKey2
type Rekord2SchemaSignature2PublicKey2 struct {

	// Specifies the content of the public key inline within the document
	// Format: byte
	Content2 strfmt.Base64 `json:"content2,omitempty"`

	// Specifies the location of the public key
	// Format: uri
	Url2 strfmt.URI `json:"url2,omitempty"`
}

// Validate validates this rekord2 schema signature2 public key2
func (m *Rekord2SchemaSignature2PublicKey2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUrl2(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Rekord2SchemaSignature2PublicKey2) validateUrl2(formats strfmt.Registry) error {
	if swag.IsZero(m.Url2) { // not required
		return nil
	}

	if err := validate.FormatOf("signature2"+"."+"publicKey2"+"."+"url2", "body", "uri", m.Url2.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this rekord2 schema signature2 public key2 based on context it is used
func (m *Rekord2SchemaSignature2PublicKey2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Rekord2SchemaSignature2PublicKey2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Rekord2SchemaSignature2PublicKey2) UnmarshalBinary(b []byte) error {
	var res Rekord2SchemaSignature2PublicKey2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
