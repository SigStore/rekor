// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright 2021 The Sigstore Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GitpushV001Schema Git push certificates v0.0.1 Schema
//
// Schema for Git push certificate object
//
// swagger:model gitpushV001Schema
type GitpushV001Schema struct {

	// Git push certificate version
	// Required: true
	CertificateVersion *string `json:"certificate_version"`

	// Nonce to prevent replay attacks
	// Required: true
	Nonce *string `json:"nonce"`

	// Protocol data
	// Required: true
	Protocol *string `json:"protocol"`

	// Git repository URL
	// Required: true
	Pushee *string `json:"pushee"`

	// GPG key identifier, short keyid or human readable
	// Required: true
	Pusher *string `json:"pusher"`

	// Signature data
	// Required: true
	Signature *string `json:"signature"`
}

// Validate validates this gitpush v001 schema
func (m *GitpushV001Schema) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCertificateVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNonce(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePushee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePusher(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignature(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GitpushV001Schema) validateCertificateVersion(formats strfmt.Registry) error {

	if err := validate.Required("certificate_version", "body", m.CertificateVersion); err != nil {
		return err
	}

	return nil
}

func (m *GitpushV001Schema) validateNonce(formats strfmt.Registry) error {

	if err := validate.Required("nonce", "body", m.Nonce); err != nil {
		return err
	}

	return nil
}

func (m *GitpushV001Schema) validateProtocol(formats strfmt.Registry) error {

	if err := validate.Required("protocol", "body", m.Protocol); err != nil {
		return err
	}

	return nil
}

func (m *GitpushV001Schema) validatePushee(formats strfmt.Registry) error {

	if err := validate.Required("pushee", "body", m.Pushee); err != nil {
		return err
	}

	return nil
}

func (m *GitpushV001Schema) validatePusher(formats strfmt.Registry) error {

	if err := validate.Required("pusher", "body", m.Pusher); err != nil {
		return err
	}

	return nil
}

func (m *GitpushV001Schema) validateSignature(formats strfmt.Registry) error {

	if err := validate.Required("signature", "body", m.Signature); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this gitpush v001 schema based on context it is used
func (m *GitpushV001Schema) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GitpushV001Schema) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GitpushV001Schema) UnmarshalBinary(b []byte) error {
	var res GitpushV001Schema
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
