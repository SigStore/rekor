// Code generated by go-swagger; DO NOT EDIT.

// /*
// Copyright The Rekor Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TufV001Schema tuf v0.0.1 Schema
//
// Schema for tuf metadata entries
//
// swagger:model tufV001Schema
type TufV001Schema struct {

	// Arbitrary content to be included in the verifiable entry in the transparency log
	ExtraData interface{} `json:"extraData,omitempty"`

	// metablock
	// Required: true
	Metablock *TufV001SchemaMetablock `json:"metablock"`

	// public key
	// Required: true
	PublicKey *TufV001SchemaPublicKey `json:"publicKey"`
}

// Validate validates this tuf v001 schema
func (m *TufV001Schema) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMetablock(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublicKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TufV001Schema) validateMetablock(formats strfmt.Registry) error {

	if err := validate.Required("metablock", "body", m.Metablock); err != nil {
		return err
	}

	if m.Metablock != nil {
		if err := m.Metablock.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metablock")
			}
			return err
		}
	}

	return nil
}

func (m *TufV001Schema) validatePublicKey(formats strfmt.Registry) error {

	if err := validate.Required("publicKey", "body", m.PublicKey); err != nil {
		return err
	}

	if m.PublicKey != nil {
		if err := m.PublicKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("publicKey")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this tuf v001 schema based on the context it is used
func (m *TufV001Schema) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMetablock(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePublicKey(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TufV001Schema) contextValidateMetablock(ctx context.Context, formats strfmt.Registry) error {

	if m.Metablock != nil {
		if err := m.Metablock.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metablock")
			}
			return err
		}
	}

	return nil
}

func (m *TufV001Schema) contextValidatePublicKey(ctx context.Context, formats strfmt.Registry) error {

	if m.PublicKey != nil {
		if err := m.PublicKey.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("publicKey")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TufV001Schema) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TufV001Schema) UnmarshalBinary(b []byte) error {
	var res TufV001Schema
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TufV001SchemaMetablock tuf information about a repository
//
// swagger:model TufV001SchemaMetablock
type TufV001SchemaMetablock struct {

	// The signature(s) over the metadata
	Signatures []*TufSignatureV001Schema `json:"signatures"`

	// The signed payload
	Signed interface{} `json:"signed,omitempty"`
}

// Validate validates this tuf v001 schema metablock
func (m *TufV001SchemaMetablock) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSignatures(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TufV001SchemaMetablock) validateSignatures(formats strfmt.Registry) error {
	if swag.IsZero(m.Signatures) { // not required
		return nil
	}

	for i := 0; i < len(m.Signatures); i++ {
		if swag.IsZero(m.Signatures[i]) { // not required
			continue
		}

		if m.Signatures[i] != nil {
			if err := m.Signatures[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("metablock" + "." + "signatures" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this tuf v001 schema metablock based on the context it is used
func (m *TufV001SchemaMetablock) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSignatures(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TufV001SchemaMetablock) contextValidateSignatures(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Signatures); i++ {

		if m.Signatures[i] != nil {
			if err := m.Signatures[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("metablock" + "." + "signatures" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TufV001SchemaMetablock) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TufV001SchemaMetablock) UnmarshalBinary(b []byte) error {
	var res TufV001SchemaMetablock
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TufV001SchemaPublicKey The PGP public key that can verify the RPM signature
//
// swagger:model TufV001SchemaPublicKey
type TufV001SchemaPublicKey struct {

	// Specifies the content of the public key inline within the document
	// Format: byte
	Content strfmt.Base64 `json:"content,omitempty"`

	// Specifies the location of the public key
	// Format: uri
	URL strfmt.URI `json:"url,omitempty"`
}

// Validate validates this tuf v001 schema public key
func (m *TufV001SchemaPublicKey) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TufV001SchemaPublicKey) validateURL(formats strfmt.Registry) error {
	if swag.IsZero(m.URL) { // not required
		return nil
	}

	if err := validate.FormatOf("publicKey"+"."+"url", "body", "uri", m.URL.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this tuf v001 schema public key based on context it is used
func (m *TufV001SchemaPublicKey) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TufV001SchemaPublicKey) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TufV001SchemaPublicKey) UnmarshalBinary(b []byte) error {
	var res TufV001SchemaPublicKey
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
